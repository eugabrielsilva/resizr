<?php

/*
    #####################################
                RESIZR v2.0
              by Gabriel Silva
    #####################################

    Do not edit this file. User settings are now located in resizr-config.php file.
*/

// Load user config file if exists
if (is_file(__DIR__ . '/resizr-config.php')) define('CONFIG', require_once(__DIR__ . '/resizr-config.php'));

// Set default settings - DO NOT EDIT THIS. COPY THE CONFIG FILE TO YOUR FOLDER INSTEAD.
if (!defined('CONFIG')) define('CONFIG', [
    'cache_folder' => __DIR__ . '/cache',
    'default_width' => 200,
    'default_height' => 200,
    'jpeg_quality' => 70,
    'png_compression' => 3,
    'keep_transparency' => true,
    'fill_color' => [255, 255, 255]
]);

// Validates if cache folder exists and its writable
if (!is_dir(CONFIG['cache_folder'])) return errorResponse('Cache folder (' . CONFIG['cache_folder'] . ') is not a valid directory.');
if (!is_writable(CONFIG['cache_folder'])) return errorResponse('Cache folder (' . CONFIG['cache_folder'] . ') does not have writing permissions.');

// Retrieves and validates source image URL parameter
if (empty($_GET['src'])) return errorResponse('Source image URL is required.');
$sourceImage = $_GET['src'];

// Checks if source image exists
if (!is_file($sourceImage)) return errorResponse('Source image (' . $sourceImage . ') is not a valid image file.', 404);

// Retrieves width parameter
$maxWidth = intval($_GET['w'] ?? CONFIG['default_width']);

// Retrieves height parameter
$maxHeight = intval($_GET['h'] ?? CONFIG['default_height']);

// Sets the target file extension if keep transparency is enabled
if (CONFIG['keep_transparency'] && in_array(mime_content_type($sourceImage), ['image/webp', 'image/png'])) {
    $targetExtension = 'png';
    $mime = 'image/png';
} else {
    $targetExtension = 'jpg';
    $mime = 'image/jpeg';
}

// Gets the cached file location
$targetImage = rtrim(CONFIG['cache_folder'], '/') . '/' . md5("{$sourceImage}-w{$maxWidth}-h{$maxHeight}") . ".{$targetExtension}";

// Checks if the thumb has already been generated
if (is_file($targetImage) && filemtime($targetImage) >= filemtime($sourceImage)) return parseImage($targetImage, $mime);

// Retrieves image information
list($origWidth, $origHeight, $type, $mime) = getimagesize($sourceImage);

// Loads the image if supported
switch ($type) {
    case IMAGETYPE_JPEG:
        $image = imagecreatefromjpeg($sourceImage);
        break;
    case IMAGETYPE_PNG:
        $image = imagecreatefrompng($sourceImage);
        break;
    case IMAGETYPE_BMP:
        $image = imagecreatefrombmp($sourceImage);
        break;
    case IMAGETYPE_WBMP:
        $image = imagecreatefromwbmp($sourceImage);
        break;
    case IMAGETYPE_WEBP:
        $image = imagecreatefromwebp($sourceImage);
        break;
    default:
        return parseImage($sourceImage, $mime);
}

// Calculates the new dimensions
$ratio = min(($maxWidth / $origWidth), ($maxHeight / $origHeight));
$newWidth = (int)$origWidth  * $ratio;
$newHeight = (int)$origHeight * $ratio;

// Creates the thumb
$newImage = imagecreatetruecolor($newWidth, $newHeight);

// Checks for transparency
if ($targetExtension == 'png') {
    $transparent = imagecolorallocatealpha($newImage, 0, 0, 0, 127);
    imagefill($newImage, 0, 0, $transparent);
    imagesavealpha($newImage, true);
    imagecopyresampled($newImage, $image, 0, 0, 0, 0, $newWidth, $newHeight, $origWidth, $origHeight);
    imagepng($newImage, $targetImage, CONFIG['png_compression']);
} else {
    $fillColor = imagecolorallocate($newImage, ...CONFIG['fill_color']);
    imagefilledrectangle($newImage, 0, 0, $newWidth, $newHeight, $fillColor);
    imagecopyresampled($newImage, $image, 0, 0, 0, 0, $newWidth, $newHeight, $origWidth, $origHeight);
    imagejpeg($newImage, $targetImage, CONFIG['jpeg_quality']);
}

// Cleans the memory
imagedestroy($image);
imagedestroy($newImage);

// Redirects to the new image
return parseImage($targetImage, $mime);

/**
 * Returns an error with HTTP 500 response code.
 * @param string $message Error message to display.
 * @param int $code HTTP error code.
 */
function errorResponse(string $message, int $code = 500)
{
    http_response_code($code);
    die('<b>Resizr error:</b> ' . $message);
}

/**
 * Loads an image in the browser.
 * @param string $filename Image URL to parse.
 * @param string $mime Image MIME type.
 */
function parseImage(string $filaname, string $mime)
{
    header("Content-Type: {$mime}");
    echo file_get_contents($filaname);
    exit;
}
